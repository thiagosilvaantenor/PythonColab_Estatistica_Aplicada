# -*- coding: utf-8 -*-
"""distribuicao frequencia dolar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PVBWFuJxSZXXDAq8Lg_jHokBIeMJZMbV

Titulo
"""

import numpy as np
import pandas as pd
from collections import Counter

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

df = pd.read_csv('/content/drive/MyDrive/Cursos/Fatec /3°Semestre/EstatisticaAplicada/Dados/dados_tratados.csv', sep=',', encoding='iso-8859-1')

df.head()

df.shape

compra = df['compra']
compra

"""## **Tabela de Frequências**"""

# Frequência absoluta
freq_absoluta = Counter(compra)
freq_absoluta

# Transformar em dataframe
tabela = pd.DataFrame.from_dict(freq_absoluta, orient='index')
tabela

# Colocar em ordem crescente
tabela = tabela.sort_index(ascending=True)
tabela

# Colocar os indíces reais
tabela.reset_index(inplace=True)
tabela

# Renomear colunas
tabela = tabela.rename(columns={'index': 'valor'})
tabela.head()

tabela = tabela.rename(columns={0: 'freq_abs'})
tabela.head()

# Incluir frequência relativa na tabela
tabela['freq_rel'] = tabela['freq_abs'] / tabela['freq_abs'].sum()
tabela

# Frequencia percentual relativa
tabela['freq_rel_perc'] = tabela['freq_rel'] * 100
tabela

# Incluir frequência acumulada
tabela['freq_acum'] = tabela['freq_abs'].cumsum()
tabela

"""## **Tabela de Classes de Frequência**"""

tabela.valor.min()

tabela.valor.max()

dif = tabela.valor.max() - tabela.valor.min()
dif

classes = [4.7,4.8,4.9,5,5.1,5.2,5.3]

labels = ['4.7 - 4.8', '4.8 - 4.9', '4.9 - 5.0', '5.0 - 5.1', '5.1 - 5.2', '5.2 - 5.3']

intervalos = pd.cut(x = tabela.valor, bins = classes, labels = labels, include_lowest = True)

freq_abs = pd.value_counts(intervalos)
freq_abs

freq_rel = pd.value_counts(intervalos, normalize = True)
freq_rel

dist_freq = pd.DataFrame({'Frequência absoluta' : freq_abs,
                          'Frequência relativa': freq_rel})
dist_freq

dist_freq.sort_index(ascending = True, inplace = True)
dist_freq

dist_freq['freq_rel_perc'] = np.round(dist_freq['Frequência relativa']*100,2)
dist_freq

dist_freq['freq_acum'] = dist_freq['Frequência absoluta'].cumsum()
dist_freq

"""## Histograma"""

# Matplotlib
import matplotlib.pyplot as plt

from matplotlib import colors
plt.hist(df.compra, bins = 5, color='red')
plt.title('Histograma')
plt.xlabel('Compra')
plt.ylabel('Frequência')
plt.show()

"""**Seaborn**"""

import seaborn as sns

sns.histplot(df['venda'], bins=8, color="red", kde=2)

"""**Plotly**"""

import plotly.express as px
grafico = px.histogram (df, x = "compra", nbins=20)
grafico.update_layout(width=500,height=400,title_text='Histograma')
grafico.show()